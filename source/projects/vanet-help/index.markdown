---
layout: page
title: "Vehicle Ad-hoc Network \"Help\" Dissemination Simulation"
date: 2014-08-20 09:26
comments: true
sharing: true
footer: true
#categories:
#- completed projects
tags:
- Completed Projects
- Networking
- VANET
---

This was a network simulation project in my Wireless Networks course. This page contains sections and images taken from the final project report to provide a quick summary of the project. 

### Summary

The objective of this project is to simulate a “help” message dissemination in a vehicle-to-vehicle network based on a real city map and observing metrics such as end-to-end delay and throughput. The “help” message is generated by one car in distress, and the message is broadcasted through the ad-hoc network to other cars. The goal is to observe the effects of parameters such as mobility models, propagation model, city-based map constraint, and dissemination techniques, and other properties. 

This is an opportunity to learn to utilize popular frameworks such as OMNeT++ in order to construct simulation scenarios that will be useful for any future network modeling.


### Simulation Approach

The OMNeT++ framework provides the engine that performs much of the heavy lifting: the network simulation itself. Additional tools such as INETMANET, SUMO, and VEINS are used to provide features including ad-hoc routing protocols, traffic mobility control, and a script that ties these tools together.
OpenStreetMap is used to provide the real-world map that is used in the simulation. An arbitrary section of Raleigh is selected to be the road environment. The parameters in the table below summarizes the specification of this network model. 

<!-- Table of parameters -->
    Data Rate:          6Mbps
    Radio Propagation:  Free Space, 2-Ray Model
    MAC EDCA QoS:       Help Message = AC3, Normal Message = AC1
    Message Size:       Help Message = 256B, Normal Message = 512B
    Message Interval:   1 per second
    Routing Protocol:   AODV
    Mobility Models:    Random WayPoint (Sandbox), BonnMotion (Trace based/SUMO)
    Real City map:      OpenStreetMap – Raleigh -  300mx300m
    Number of Vehicles: 10 Cars
    Maximum Speed:      50 km/h == 13.89 m/s

{% imgcap center http://i.imgur.com/VvXJzUt.png OSM Exported 300m x 300m Map %}


### Classes and Modules

Many modules used in this project are provided in OMNeT++ or INETMANET, such as wireless network interfaces and physical propagation properties. These module dependencies and their configurations will not be discussed here, as they are obvious by browsing the source code. This section will go over the custom modules created in order to specifically implement the simulation environment discussed in the Simulation Approach section.

#### Module: Map (Network)

This is a NED module that provides the network setup for running SUMO and OMNeT++ together via VEINS that simulates real-world traffic. The scenario manager is TraCIManager, which communicates with SUMO in order to receive mobility information from the generated traffic trace route.

{% imgcap center http://i.imgur.com/O5jzceP.png  Map Network Module %}

#### Module: Car

This is a NED module that represents an on-road vehicle: a car with ad-hoc capabilities. The basis of this module is from the INETMANET TraCIDemo project that also included a Car module. However, this new module is created in order to integrate a MANET routing protocol, as well as a custom application layer that is capable of sending “help” messages. 

This module contains many sub-modules that represents an entire network stack: a custom UDP application layer (discussed in the next subsection), UDP transport layer, AODV network routing layer, Wi-Fi MAC layer, and mobility model to provide movement.

{% imgcap center http://i.imgur.com/WWVJhpu.png  Car Module %}


#### Class: UDPHelpApp

This is the application level class that is extended from the UDPBasicBurst class available in INETMANET. The purpose of this class is to create packets that have custom parameters and messages sizes to represent the “help” messages and regular messages. It also takes care of the logic required to rebroadcast an fresh “help message, and keep track of a list of Id’s of seen messages.

#### Class: UDPHelpClassifier

This class is used to custom control the access category (priority) of a packet when transmitting. The INETMANET provided class Ieee80211eClassifier is extended in order to override the method that classifies outgoing messages. Per the project specification, “help” messages have the highest priority of AC3, and regular messages have the priority of AC1.

</p>
### Project Completion: 08/2014